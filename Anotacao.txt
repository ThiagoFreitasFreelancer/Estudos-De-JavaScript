
tipos primitivos: string, number, undefined, null, boolean, symbol
tipos primitivos quando sao passados seu valor é COPIADO

tipos mutaveis: array, object, function
tipos mutaveis quando seu valor é passados, PASSAM A APONTAR PARA O MESMO INDEREÇO
de memoria

operadores aritimeticos: +, -, /, %, **, =, ==, ===, ++, --
operadores de atribuição: +=, -=, /=, *=, %=, **=

precedencia:(), **, *, /, %, +, -

operadores logicos: &&, ||, !

operador ternario: ? :

operadores de comparação: <, <=, >, >=, ==, ===, !=, !== 

operador em arrays: aula 29 (...)rest => pega o resto, (...)spread => espelha

Valores avaliados como falso no JavaScript:
    false
    0
    `` "" '': string vazia
    null / undefined
    NaN
QUALQUER COISA DIFERENTE DOS VALORES A CIMA É TRUE

serve para por um arquivo JavaScript no HTML, da forma antiga
<script src="index.js">

Não usar mais var

com var é possivel redeclarar uma mesma variavel

var nome = 'rola'
var nome = 'thola'

isso é um comportamento indesejavel

sempre usar let ou const

coversão:

    parseInt(string) ou Number(string)
    parseFloat() ou Number(string)
    parseString()

Locura que da pra fazer com string

    nao serve pra muita coisa mais da
    let = umaString = "Um \"texto""; 


string.replace(/ /g, "") para remover espaços em branco de uma string
a espreção procura espaços em branco / /g e subistitui por uma strimg

Array -> para adicionar no inicio   Array.unshift()
         para adicionar no fim  Array.push()
         para remover do fim Array.pop()
         para remover do inicio Array.shift()

         As mesmas propriedades de string funciona
         de certas formas no Array, como: slice, lenght
        
        Para copiar um array para outro
        a = []
        b = [1,2,3]
        a = [...b] copia o valor de b para a (spred)
        
        tambem fuinciona para object

        a = {}
        b = {
            nome: `jose`,
            sobrenome: `pedro`
        }
        a = {...b} copia o valor de b para a (spred)


Arrio Function serve pra facilitar vida
Nao precisa por o nome function
const nomeeDaFuncao = () =>{ 
    return;
 };

quando voce tem UM so valor nao precisa dos parenteses
const retorno = ``;
const nomeDaFuncao = parametro => parametro + retorno;

exemplos na Aula21
JavaScript tem o que se chama de Avaliação de curto-circuito
    por exemplo com o operador &&:
        ele retorna o VALOR que gerou o false da expressão
        
        console.log(`Maria` && NaN && `Pedro`); Retorna NaN
        console.log(50 && undefined && `ronbaldo`); Retorna undefined

        da mesma forma com uma função

        const vaiExecutar = false;
        const functionQualquer(){}

        podemos fazer

        vaiExecutar && functionQualquer();

        a função so vai executar caso o valor de vaiExecutar seja TRUE

    por exemplo com o operador ||:

        funciona da mesma forma

        console.log(`Maria` || NaN || `Pedro`); Retorna Maria, por que
        é o primeiro verdadeiro

        console.log(null || undefined || `ronbaldo` || true); Retorna ronbaldo,
        por que é o primeiro verdadeiro

        da para fazer valores default

        const corUsuario = null;
        const corPadrao = corUsuario || `preto`;
        
        corPadrao recebera o valor de `preto`

        const corUsuario = `vermelho`;
        const corPadrao = corUsuario || `preto`;

        corPadrao recebera o valor de `vermelho`,
        por que o vermelho é o primeiro verdadeiro
    
    Tipos for no array

        for padrão = for (let i = 0; i < n ; i++){}

        for in = for (let qualquernome in string ou array ou objeto..) {

                console.log(qualquernome) // retorna o INDECE do vetor
        }

        for of = for (let qualquerNome of stirng ou array){
            
            console.log(qualquerNome) // devolve o ELEMENTO no indece

        }

        O MAIS USAVEL DENTRE ELES É O FOREACH

            array.forEach( functino (valor, indice, array){

                console.log(valor, indice, array)

            })
